AWSTemplateFormatVersion: "2010-09-09"
Description: "NLP based PhotoAlbum Web Application"
Parameters:
    S3Bucket4Name:
        Type: "String"
        Default: "s3-voice-recording-photo-album-3123"

    S3Bucket3Name:
        Type: "String"
        Default: "s3-voice-output-photo-album-3123"

    S3Bucket2Name:
        Type: "String"
        Default: "photoalbumcloudassignment3-3123"

    S3BucketName:
        Type: "String"
        Default: "nlp-photo-album-frontend-3123"

    LambdaFunction2Name:
        Type: "String"
        Default: "index-photos"

    LambdaFunctionName:
        Type: "String"
        Default: "search-photos"
AWSTemplateFormatVersion: 2010-09-09
Resources:
    CodeCommitRepository:
        Type: "AWS::CodeCommit::Repository"
        Properties:
            RepositoryName: "FrontendPhotoAlbum"
            Code:
                BranchName: main
                S3: 
                    Bucket: eashan-demo
                    Key: s3-front-end-code.zip

    CodeCommitRepository2:
        Type: "AWS::CodeCommit::Repository"
        Properties:
            RepositoryName: "LambdaPhotoAlbum"            
            Code:
                BranchName: main
                S3: 
                    Bucket: eashan-demo
                    Key: lambda-code.zip

    LambdaFunction2:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: !Ref LambdaFunction2Name
            Handler: "lambda_function.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: "eashan-demo"
                S3Key: "search-photos.zip"
            MemorySize: 128
            Role: !GetAtt IAMRole2.Arn
            Runtime: "python3.9"
            Timeout: 8
            TracingConfig: 
                Mode: "PassThrough"
            Layers: 
              - !Sub "arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python39:1"
            EphemeralStorage: 
                Size: 512

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Ref S3BucketName
            AccessControl: PublicRead
            WebsiteConfiguration: 
                IndexDocument: "index.html"

    BucketPolicy:
        Type: 'AWS::S3::BucketPolicy'
        Properties:
            PolicyDocument:
                Id: MyPolicy
                Version: 2012-10-17
                Statement:
                  - Sid: PublicReadForGetBucketObjects
                    Effect: Allow
                    Principal: '*'
                    Action: 's3:GetObject'
                    Resource: !Join 
                        - ''
                        - - 'arn:aws:s3:::'
                          - !Ref S3Bucket
                          - /*
            Bucket: !Ref S3Bucket

    S3Bucket3:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Ref S3Bucket3Name

    S3Bucket4:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Ref S3Bucket4Name
    
    S3BucketForPhotosB2:
        Type: 'AWS::S3::Bucket'
        DependsOn: PermissionForS3ToLF1
        Properties:
            BucketName: !Ref S3Bucket2Name
            NotificationConfiguration:
                LambdaConfigurations:
                  - Event: s3:ObjectCreated:*
                    Function: !GetAtt LambdaFunction.Arn

    S3BucketB2Policy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref S3BucketForPhotosB2
            PolicyDocument:
                {
                'Statement':
                    [
                    {
                        'Effect': 'Allow',
                        'Principal': { 'AWS': '*' },
                        'Action': 's3:ListBucket',
                        'Resource':
                        {
                            'Fn::Join':
                            ['', ['arn:aws:s3:::', { 'Ref': 'S3BucketForPhotosB2' }]],
                        },
                    },
                    {
                        'Effect': 'Allow',
                        'Principal': { 'AWS': '*' },
                        'Action': ['s3:GetObject', 's3:PutObject'],
                        'Resource':
                        {
                            'Fn::Join':
                            [
                                '',
                                [
                                'arn:aws:s3:::',
                                { 'Ref': 'S3BucketForPhotosB2' },
                                '/*',
                                ],
                            ],
                        },
                    },
                    ],
                }

    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "index-photos-role-uhv2ehqp"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSLambdaBasicExecutionRole-12ac62b4-f068-4077-badb-8bcf6feb1542"
              - "arn:aws:iam::aws:policy/AmazonRekognitionFullAccess"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
              - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"

    IAMRole2:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "search-photos-role-ghk40dy2"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSLambdaBasicExecutionRole-13edaee4-0ff7-4897-ad4d-950e2e1a515d"
              - "arn:aws:iam::aws:policy/AmazonTranscribeFullAccess"
              - "arn:aws:iam::aws:policy/AmazonLexFullAccess"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
              - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"

    LambdaFunction:
        DependsOn:
            - IAMRole
        Type: "AWS::Lambda::Function"
        DependsOn: IAMRole
        Properties:
            Description: ""
            FunctionName: !Ref LambdaFunctionName
            Handler: "lambda_function.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: "eashan-demo"
                S3Key: "index-photos.zip"
            MemorySize: 128
            Role: !GetAtt IAMRole.Arn
            Runtime: "python3.9"
            Timeout: 30
            TracingConfig: 
                Mode: "PassThrough"
            Layers: 
              - !Sub "arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python39:1"
            EphemeralStorage: 
                Size: 512

    PermissionForS3ToLF1:
        Type: 'AWS::Lambda::Permission'
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref LambdaFunction
            Principal: s3.amazonaws.com
            SourceAccount: !Ref 'AWS::AccountId'
            SourceArn: !Sub 'arn:aws:s3:::${S3Bucket2Name}'
    
    ApiGatewayRestApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: "AI Photo Search"
            Description: "AI Photo Search application, built during the Cloud and Big Data course at Columbia University."
            ApiKeySourceType: "HEADER"
            BinaryMediaTypes: 
              - "image/*"
              - "audio/*"
            EndpointConfiguration: 
                Types: 
                  - "REGIONAL"
            BodyS3Location:
                Bucket: 'eashan-demo'
                Key: 'AI Photo Search-v1-swagger.yaml'

    CodeBuildProject:
        Type: "AWS::CodeBuild::Project"
        Properties:
            Name: !Sub "${CodeCommitRepository2.Name}CodeBuild"
            Source: 
                InsecureSsl: false
                Type: "CODEPIPELINE"
            Artifacts: 
                EncryptionDisabled: false
                Name: !Sub "${CodeCommitRepository2.Name}CodeBuild"
                Packaging: "NONE"
                Type: "CODEPIPELINE"
            Cache: 
                Type: "NO_CACHE"
            Environment: 
                ComputeType: "BUILD_GENERAL1_SMALL"
                Image: "aws/codebuild/standard:6.0"
                ImagePullCredentialsType: "CODEBUILD"
                PrivilegedMode: false
                Type: "LINUX_CONTAINER"
            ServiceRole: !Ref IAMRole6
            TimeoutInMinutes: 60
            QueuedTimeoutInMinutes: 480
            EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
            BadgeEnabled: false
            LogsConfig: 
                CloudWatchLogs: 
                    Status: "ENABLED"
                S3Logs: 
                    Status: "DISABLED"
                    EncryptionDisabled: false
            Visibility: "PRIVATE"
    CodeBuildProject:
        Type: "AWS::CodeBuild::Project"
        Properties:
            Name: "LambdaPhotoAlbumCodeBuild"
            Source: 
                InsecureSsl: false
                Type: "CODEPIPELINE"
            Artifacts: 
                EncryptionDisabled: false
                Name: "LambdaPhotoAlbumCodeBuild"
                Packaging: "NONE"
                Type: "CODEPIPELINE"
            Cache: 
                Type: "NO_CACHE"
            Environment: 
                ComputeType: "BUILD_GENERAL1_SMALL"
                Image: "aws/codebuild/standard:6.0"
                ImagePullCredentialsType: "CODEBUILD"
                PrivilegedMode: false
                Type: "LINUX_CONTAINER"
            ServiceRole: !GetAtt IAMRole6.Arn
            TimeoutInMinutes: 60
            QueuedTimeoutInMinutes: 480
            EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
            BadgeEnabled: false
            LogsConfig: 
                CloudWatchLogs: 
                    Status: "ENABLED"
                S3Logs: 
                    Status: "DISABLED"
                    EncryptionDisabled: false
            Visibility: "PRIVATE"

    IAMRole6:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "codebuild-LambdaPhotoAlbumCodeBuild-service-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codebuild.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

    IAMManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodeBuildBasePolicy-LambdaPhotoAlbumCodeBuild-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/LambdaPhotoAlbumCodeBuild",
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/LambdaPhotoAlbumCodeBuild:*"
                            ],
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:s3:::codepipeline-${AWS::Region}-*"
                            ],
                            "Action": [
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:GetObjectVersion",
                                "s3:GetBucketAcl",
                                "s3:GetBucketLocation"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codebuild:CreateReportGroup",
                                "codebuild:CreateReport",
                                "codebuild:UpdateReport",
                                "codebuild:BatchPutTestCases",
                                "codebuild:BatchPutCodeCoverages"
                            ],
                            "Resource": [
                                "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/LambdaPhotoAlbumCodeBuild-*"
                            ]
                        }
                    ]
                }



    CodePipelinePipeline2:
        Type: "AWS::CodePipeline::Pipeline"
        Properties:
            Name: !Sub "${CodeCommitRepository2.Name}Pipeline"
            RoleArn: !GetAtt IAMRole5.Arn
            ArtifactStore: 
                Location: !Sub "codepipeline-${AWS::Region}-511494083853"
                Type: "S3"
            Stages: 
              - 
                Name: "Source"
                Actions: 
                  - 
                    Name: "Source"
                    ActionTypeId: 
                        Category: "Source"
                        Owner: "AWS"
                        Provider: "CodeCommit"
                        Version: "1"
                    Configuration: 
                        BranchName: "master"
                        OutputArtifactFormat: "CODE_ZIP"
                        PollForSourceChanges: "false"
                        RepositoryName: !GetAtt CodeCommitRepository2.Name
                    OutputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "SourceVariables"
                    RunOrder: 1
              - 
                Name: "Build"
                Actions: 
                  - 
                    Name: "Build"
                    ActionTypeId: 
                        Category: "Build"
                        Owner: "AWS"
                        Provider: "CodeBuild"
                        Version: "1"
                    Configuration: 
                        ProjectName: !Sub "${CodeCommitRepository2.Name}CodeBuild"
                    InputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    OutputArtifacts: 
                      - 
                        Name: "BuildArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "BuildVariables"
                    RunOrder: 1
              - 
                Name: "Deploy"
                Actions: 
                  - 
                    Name: "Deploy"
                    ActionTypeId: 
                        Category: "Deploy"
                        Owner: "AWS"
                        Provider: "CloudFormation"
                        Version: "1"
                    Configuration: 
                        ActionMode: "CHANGE_SET_REPLACE"
                        Capabilities: "CAPABILITY_IAM"
                        ChangeSetName: "LambdaCICD"
                        RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/CloudFormationServiceRole"
                        StackName: "LambdaCICD"
                        TemplatePath: "BuildArtifact::outSamTemplate.yaml"
                    InputArtifacts: 
                      - 
                        Name: "BuildArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "DeployVariables"
                    RunOrder: 1
              - 
                Name: "ApproveChangeSet"
                Actions: 
                  - 
                    Name: "ManualApprovel"
                    ActionTypeId: 
                        Category: "Approval"
                        Owner: "AWS"
                        Provider: "Manual"
                        Version: "1"
                    Configuration: {}
                    Region: !Ref AWS::Region
                    RunOrder: 1
              - 
                Name: "ExecuteChangeSet"
                Actions: 
                  - 
                    Name: "Execute"
                    ActionTypeId: 
                        Category: "Deploy"
                        Owner: "AWS"
                        Provider: "CloudFormation"
                        Version: "1"
                    Configuration: 
                        ActionMode: "CHANGE_SET_EXECUTE"
                        ChangeSetName: "LambdaCICD"
                        StackName: "LambdaCICD"
                    Region: !Ref AWS::Region
                    RunOrder: 1

    IAMRole3:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "APIGatewayS3"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"apigateway.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/S3PutObjectAccess"
              - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
            Description: "Allows API Gateway to push images to S3"

    IAMRole4:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "AWSCodePipeline1ServiceRole-${AWS::Region}-FrontendPhotoAlbumPipeline"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codepipeline.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSCodePipelineServiceRole-${AWS::Region}-FrontendPhotoAlbumPipeline"

    IAMRole5:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "AWSCodePipeline2ServiceRole-${AWS::Region}-LambdaPhotoAlbumPipeline"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codepipeline.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSCodePipelineServiceRole-${AWS::Region}-LambdaPhotoAlbumPipeline"

    IAMRole7:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "CloudFormationServiceRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"cloudformation.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/IAMFullAccess"
              - "arn:aws:iam::aws:policy/AWSLambdaExecute"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
              - "arn:aws:iam::aws:policy/AWSCloudFormationFullAccess"
              - "arn:aws:iam::aws:policy/AWSLambda_FullAccess"
            Description: "Allows CloudFormation to create and manage AWS stacks and resources on your behalf."
    
    