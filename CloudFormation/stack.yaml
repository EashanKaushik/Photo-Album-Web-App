
AWSTemplateFormatVersion: "2010-09-09"
Description: "NLP based PhotoAlbum Web Application"
Parameters:
    S3Bucket4Name:
        Type: "String"
        Default: "s3-voice-recording-photo-album"

    S3Bucket3Name:
        Type: "String"
        Default: "s3-voice-output-photo-album"

    S3Bucket2Name:
        Type: "String"
        Default: "photoalbumcloudassignment3"

    S3BucketName:
        Type: "String"
        Default: "nlp-photo-album-frontend"

    LambdaFunction2Name:
        Type: "String"
        Default: "index-photos"

    LambdaFunctionName:
        Type: "String"
        Default: "search-photos"

    GitHubOwner:
        Type: String
        Default: phananh1096
        AllowedPattern: '[A-Za-z0-9-]+'

    GitHubRepo:
        Type: String
        Default: A2-Frontend
        AllowedPattern: '[A-Za-z0-9-]+'

    GitHubBranch:
        Type: String
        Default: main
        AllowedPattern: '[A-Za-z0-9-]+'

    GitHubOAuthToken:
        Type: String
        Default: '2b811ae58dcf52fa7cd184ba29913137916248ba'
        NoEcho: true
        MinLength: 40
        MaxLength: 40
        AllowedPattern: '[a-z0-9]*'
    
    OpenSearchpassword:
        Type: "String"

    OpenSearchmaster:
        Type: "String"
        
Resources:
    LambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: !Ref LambdaFunctionName
            Handler: "lambda_function.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: "eashan-kaushik-public"
                S3Key: "index-photos.zip"
            MemorySize: 128
            Role: !GetAtt IAMRole2.Arn
            Runtime: "python3.9"
            Timeout: 30
            TracingConfig: 
                Mode: "PassThrough"
            Layers: 
              - !Sub "arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python39:1"
            EphemeralStorage: 
                Size: 512

    LambdaFunction2:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: !Ref LambdaFunction2Name
            Handler: "lambda_function.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: "eashan-kaushik-public"
                S3Key: "search-photos.zip"
            MemorySize: 128
            Role: !GetAtt IAMRole.Arn
            Runtime: "python3.9"
            Timeout: 8
            TracingConfig: 
                Mode: "PassThrough"
            Layers: 
              - !Sub "arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python39:1"
            EphemeralStorage: 
                Size: 512

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Ref S3BucketName
            WebsiteConfiguration: 
                IndexDocument: "index.html"

    S3Bucket2:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Ref S3Bucket2Name
            NotificationConfiguration: 
                LambdaConfigurations: 
                  - 
                    Event: "s3:ObjectCreated:Put"
                    Function: !GetAtt LambdaFunction2.Arn

    S3Bucket3:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Ref S3Bucket3Name

    S3Bucket4:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Ref S3Bucket4Name

    ApiGatewayRestApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: "AI Photo Search"
            Description: "AI Photo Search application, built during the Cloud and Big Data course at Columbia University."
            ApiKeySourceType: "HEADER"
            BinaryMediaTypes: 
              - "image/*"
              - "audio/*"
            EndpointConfiguration: 
                Types: 
                  - "REGIONAL"
    OpenSearchServiceDomain:
    Type: "AWS::OpenSearchService::Domain"
    Properties:
        DomainName: "photos"
        EngineVersion: "7.10"
        ClusterConfig: 
            ColdStorageOptions: 
                Enabled: false
            DedicatedMasterEnabled: false
            InstanceCount: 1
            InstanceType: "t3.small.elasticsearch"
            ZoneAwarenessEnabled: false
            WarmEnabled: false
        AccessPolicies: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":\"es:*\",\"Resource\":\"arn:aws:es:${AWS::Region}:290851490523:domain/photos/*\"}]}"
        SnapshotOptions: {}
        snapshot_options: {}
        EncryptionAtRestOptions: 
            Enabled: true
            KmsKeyId: !Sub "arn:aws:kms:${AWS::Region}:290851490523:key/76dc29b0-8f2f-4b16-a8b1-781e92534b8a"
        NodeToNodeEncryptionOptions: 
            Enabled: true
        AdvancedOptions: 
            Enabled: true
            InternalUserDatabaseEnabled: true
            MasterUserOptions:
                # MasterUserARN: arn:aws:iam::996208533033:role/LambdaMasterUserRole
                MasterUserName: !Ref OpenSearchmaster
                MasterUserPassword: !Ref OpenSearchpassword
            "indices.fielddata.cache.size": "20"
            "indices.query.bool.max_clause_count": "1024"
            override_main_response_version: "false"
            "rest.action.multi.allow_explicit_index": "true"
        EBSOptions: 
            EBSEnabled: true
            VolumeType: "gp3"
            VolumeSize: 10
            Iops: 3000
            Throughput: 125
        CognitoOptions: 
            Enabled: false
        DomainEndpointOptions: 
            EnforceHTTPS: true
            TLSSecurityPolicy: "Policy-Min-TLS-1-0-2019-07"
            CustomEndpointEnabled: false
        AdvancedSecurityOptions: 
            Enabled: true
            InternalUserDatabaseEnabled: true
            AnonymousAuthEnabled: false

    CodeBuildProject:
        Type: "AWS::CodeBuild::Project"
        Properties:
            Name: "LambdaPhotoAlbumCodeBuild"
            Source: 
                InsecureSsl: false
                Type: "CODEPIPELINE"
            Artifacts: 
                EncryptionDisabled: false
                Name: "LambdaPhotoAlbumCodeBuild"
                Packaging: "NONE"
                Type: "CODEPIPELINE"
            Cache: 
                Type: "NO_CACHE"
            Environment: 
                ComputeType: "BUILD_GENERAL1_SMALL"
                Image: "aws/codebuild/standard:6.0"
                ImagePullCredentialsType: "CODEBUILD"
                PrivilegedMode: false
                Type: "LINUX_CONTAINER"
            ServiceRole: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/codebuild-LambdaPhotoAlbumCodeBuild-service-role"
            TimeoutInMinutes: 60
            QueuedTimeoutInMinutes: 480
            EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
            BadgeEnabled: false
            LogsConfig: 
                CloudWatchLogs: 
                    Status: "ENABLED"
                S3Logs: 
                    Status: "DISABLED"
                    EncryptionDisabled: false
            Visibility: "PRIVATE"

    CodePipelinePipeline:
        Type: "AWS::CodePipeline::Pipeline"
        Properties:
            Name: "FrontendPhotoAlbumPipeline"
            RoleArn: !GetAtt IAMRole4.Arn
            ArtifactStore: 
                Location: !Sub "codepipeline-${AWS::Region}-511494083853"
                Type: "S3"
            Stages: 
              - Name: "Source"
                Actions: 
                  - Name: "Source"
                    ActionTypeId: 
                        Category: "Source"
                        Owner: "AWS"
                        Provider: "CodeCommit"
                        Version: "1"
                    Configuration: 
                        {
                        'Owner': !Ref GitHubOwner,
                        'Repo': !Ref GitHubRepo,
                        'Branch': !Ref GitHubBranch,
                        'OAuthToken': !Ref GitHubOAuthToken,
                        }
                    OutputArtifacts: 
                      - Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "SourceVariables"
                    RunOrder: 1
              - Name: "Deploy"
                Actions: 
                  - Name: "Deploy"
                    ActionTypeId: 
                        Category: "Deploy"
                        Owner: "AWS"
                        Provider: "S3"
                        Version: "1"
                    Configuration: 
                        BucketName: !Ref S3Bucket
                        Extract: "true"
                    InputArtifacts: 
                      - Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "DeployVariables"
                    RunOrder: 1

    CodePipelinePipeline2:
        Type: "AWS::CodePipeline::Pipeline"
        Properties:
            Name: "LambdaPhotoAlbumPipeline"
            RoleArn: !GetAtt IAMRole5.Arn
            ArtifactStore: 
                Location: !Sub "codepipeline-${AWS::Region}-511494083853"
                Type: "S3"
            Stages: 
              - Name: "Source"
                Actions: 
                  - Name: "Source"
                    ActionTypeId: 
                        Category: "Source"
                        Owner: "AWS"
                        Provider: "CodeCommit"
                        Version: "1"
                    Configuration: 
                        {
                        'Owner': !Ref GitHubOwner,
                        'Repo': !Ref GitHubRepo,
                        'Branch': !Ref GitHubBranch,
                        'OAuthToken': !Ref GitHubOAuthToken,
                        }
                    OutputArtifacts: 
                      - Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "SourceVariables"
                    RunOrder: 1
              - Name: "Build"
                Actions: 
                  - Name: "Build"
                    ActionTypeId: 
                        Category: "Build"
                        Owner: "AWS"
                        Provider: "CodeBuild"
                        Version: "1"
                    Configuration: 
                        ProjectName: !Ref CodeBuildProject
                    InputArtifacts: 
                      - Name: "SourceArtifact"
                    OutputArtifacts: 
                      - Name: "BuildArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "BuildVariables"
                    RunOrder: 1
              - Name: "Deploy"
                Actions: 
                  - Name: "Deploy"
                    ActionTypeId: 
                        Category: "Deploy"
                        Owner: "AWS"
                        Provider: "CloudFormation"
                        Version: "1"
                    Configuration: 
                        ActionMode: "CHANGE_SET_REPLACE"
                        Capabilities: "CAPABILITY_IAM"
                        ChangeSetName: "LambdaCICD"
                        RoleArn: !GetAtt IAMRole7.Arn
                        StackName: "LambdaCICD"
                        TemplatePath: "BuildArtifact::outSamTemplate.yaml"
                    InputArtifacts: 
                      - Name: "BuildArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "DeployVariables"
                    RunOrder: 1
              - Name: "ApproveChangeSet"
                Actions: 
                  - Name: "ManualApprovel"
                    ActionTypeId: 
                        Category: "Approval"
                        Owner: "AWS"
                        Provider: "Manual"
                        Version: "1"
                    Configuration: {}
                    Region: !Ref AWS::Region
                    RunOrder: 1
              - Name: "ExecuteChangeSet"
                Actions: 
                  - Name: "Execute"
                    ActionTypeId: 
                        Category: "Deploy"
                        Owner: "AWS"
                        Provider: "CloudFormation"
                        Version: "1"
                    Configuration: 
                        ActionMode: "CHANGE_SET_EXECUTE"
                        ChangeSetName: "LambdaCICD"
                        StackName: "LambdaCICD"
                    Region: !Ref AWS::Region
                    RunOrder: 1


    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "index-photos-role-uhv2ehqp"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSLambdaBasicExecutionRole-12ac62b4-f068-4077-badb-8bcf6feb1542"
              - "arn:aws:iam::aws:policy/AmazonRekognitionFullAccess"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
              - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"

    IAMRole2:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "search-photos-role-ghk40dy2"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSLambdaBasicExecutionRole-13edaee4-0ff7-4897-ad4d-950e2e1a515d"
              - "arn:aws:iam::aws:policy/AmazonTranscribeFullAccess"
              - "arn:aws:iam::aws:policy/AmazonLexFullAccess"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
              - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess"

    IAMRole3:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "APIGatewayS3"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"apigateway.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/S3PutObjectAccess"
              - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
            Description: "Allows API Gateway to push images to S3"

    IAMRole4:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-FrontendPhotoAlbumPipeline"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codepipeline.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSCodePipelineServiceRole-${AWS::Region}-FrontendPhotoAlbumPipeline"

    IAMRole5:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-LambdaPhotoAlbumPipeline"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codepipeline.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSCodePipelineServiceRole-${AWS::Region}-LambdaPhotoAlbumPipeline"

    IAMRole6:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "codebuild-${CodeBuildProject}-service-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codebuild.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/service-role/CodeBuildBasePolicy-${CodeBuildProject}-${AWS::Region}"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

    IAMRole7:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "CloudFormationServiceRole"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"cloudformation.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/IAMFullAccess"
              - "arn:aws:iam::aws:policy/AWSLambdaExecute"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
              - "arn:aws:iam::aws:policy/AWSCloudFormationFullAccess"
              - "arn:aws:iam::aws:policy/AWSLambda_FullAccess"
            Description: "Allows CloudFormation to create and manage AWS stacks and resources on your behalf."

    